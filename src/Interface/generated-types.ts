/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

 export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/images": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          url?: parameters["rowFilter.images.url"];
          message_id?: parameters["rowFilter.images.message_id"];
          message_room_id?: parameters["rowFilter.images.message_room_id"];
          message_user_id?: parameters["rowFilter.images.message_user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["images"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** images */
          images?: definitions["images"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          url?: parameters["rowFilter.images.url"];
          message_id?: parameters["rowFilter.images.message_id"];
          message_room_id?: parameters["rowFilter.images.message_room_id"];
          message_user_id?: parameters["rowFilter.images.message_user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.images.id"];
          created_at?: parameters["rowFilter.images.created_at"];
          url?: parameters["rowFilter.images.url"];
          message_id?: parameters["rowFilter.images.message_id"];
          message_room_id?: parameters["rowFilter.images.message_room_id"];
          message_user_id?: parameters["rowFilter.images.message_user_id"];
        };
        body: {
          /** images */
          images?: definitions["images"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/message": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.message.id"];
          created_at?: parameters["rowFilter.message.created_at"];
          content?: parameters["rowFilter.message.content"];
          room?: parameters["rowFilter.message.room"];
          user?: parameters["rowFilter.message.user"];
          /** If the user has seen or not the message */
          view?: parameters["rowFilter.message.view"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["message"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** message */
          message?: definitions["message"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.message.id"];
          created_at?: parameters["rowFilter.message.created_at"];
          content?: parameters["rowFilter.message.content"];
          room?: parameters["rowFilter.message.room"];
          user?: parameters["rowFilter.message.user"];
          /** If the user has seen or not the message */
          view?: parameters["rowFilter.message.view"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.message.id"];
          created_at?: parameters["rowFilter.message.created_at"];
          content?: parameters["rowFilter.message.content"];
          room?: parameters["rowFilter.message.room"];
          user?: parameters["rowFilter.message.user"];
          /** If the user has seen or not the message */
          view?: parameters["rowFilter.message.view"];
        };
        body: {
          /** message */
          message?: definitions["message"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          email?: parameters["rowFilter.profiles.email"];
          about?: parameters["rowFilter.profiles.about"];
          phone?: parameters["rowFilter.profiles.phone"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          email?: parameters["rowFilter.profiles.email"];
          about?: parameters["rowFilter.profiles.about"];
          phone?: parameters["rowFilter.profiles.phone"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          email?: parameters["rowFilter.profiles.email"];
          about?: parameters["rowFilter.profiles.about"];
          phone?: parameters["rowFilter.profiles.phone"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room */
          room?: definitions["room"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
        };
        body: {
          /** room */
          room?: definitions["room"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/userHasBlocked": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userHasBlocked.id"];
          created_at?: parameters["rowFilter.userHasBlocked.created_at"];
          blocking_user_id?: parameters["rowFilter.userHasBlocked.blocking_user_id"];
          blocked_user_id?: parameters["rowFilter.userHasBlocked.blocked_user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["userHasBlocked"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** userHasBlocked */
          userHasBlocked?: definitions["userHasBlocked"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userHasBlocked.id"];
          created_at?: parameters["rowFilter.userHasBlocked.created_at"];
          blocking_user_id?: parameters["rowFilter.userHasBlocked.blocking_user_id"];
          blocked_user_id?: parameters["rowFilter.userHasBlocked.blocked_user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.userHasBlocked.id"];
          created_at?: parameters["rowFilter.userHasBlocked.created_at"];
          blocking_user_id?: parameters["rowFilter.userHasBlocked.blocking_user_id"];
          blocked_user_id?: parameters["rowFilter.userHasBlocked.blocked_user_id"];
        };
        body: {
          /** userHasBlocked */
          userHasBlocked?: definitions["userHasBlocked"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/userHasRoom": {
    get: {
      parameters: {
        query: {
          room?: parameters["rowFilter.userHasRoom.room"];
          user?: parameters["rowFilter.userHasRoom.user"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["userHasRoom"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** userHasRoom */
          userHasRoom?: definitions["userHasRoom"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          room?: parameters["rowFilter.userHasRoom.room"];
          user?: parameters["rowFilter.userHasRoom.user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          room?: parameters["rowFilter.userHasRoom.room"];
          user?: parameters["rowFilter.userHasRoom.user"];
        };
        body: {
          /** userHasRoom */
          userHasRoom?: definitions["userHasRoom"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/getusersbyrooms": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/getusersbyroom": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  images: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    url?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `message.id`.<fk table='message' column='id'/>
     */
    message_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    message_room_id?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    message_user_id?: string;
  };
  /** @description Message that a User writes */
  message: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    content: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    room?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user?: string;
    /**
     * Format: boolean
     * @description If the user has seen or not the message
     * @default false
     */
    view: boolean;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    about?: string;
    /** Format: character varying */
    phone?: string;
  };
  /** @description Room chat for the users */
  room: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  /** @description User blocked another user */
  userHasBlocked: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    blocking_user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    blocked_user_id: string;
  };
  /** @description Users in a room */
  userHasRoom: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    room?: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description images */
  "body.images": definitions["images"];
  /** Format: bigint */
  "rowFilter.images.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.images.created_at": string;
  /** Format: character varying */
  "rowFilter.images.url": string;
  /** Format: bigint */
  "rowFilter.images.message_id": string;
  /** Format: bigint */
  "rowFilter.images.message_room_id": string;
  /** Format: uuid */
  "rowFilter.images.message_user_id": string;
  /** @description message */
  "body.message": definitions["message"];
  /** Format: bigint */
  "rowFilter.message.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.message.created_at": string;
  /** Format: text */
  "rowFilter.message.content": string;
  /** Format: bigint */
  "rowFilter.message.room": string;
  /** Format: uuid */
  "rowFilter.message.user": string;
  /**
   * Format: boolean
   * @description If the user has seen or not the message
   */
  "rowFilter.message.view": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.email": string;
  /** Format: text */
  "rowFilter.profiles.about": string;
  /** Format: character varying */
  "rowFilter.profiles.phone": string;
  /** @description room */
  "body.room": definitions["room"];
  /** Format: bigint */
  "rowFilter.room.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.created_at": string;
  /** @description userHasBlocked */
  "body.userHasBlocked": definitions["userHasBlocked"];
  /** Format: bigint */
  "rowFilter.userHasBlocked.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.userHasBlocked.created_at": string;
  /** Format: uuid */
  "rowFilter.userHasBlocked.blocking_user_id": string;
  /** Format: uuid */
  "rowFilter.userHasBlocked.blocked_user_id": string;
  /** @description userHasRoom */
  "body.userHasRoom": definitions["userHasRoom"];
  /** Format: bigint */
  "rowFilter.userHasRoom.room": string;
  /** Format: uuid */
  "rowFilter.userHasRoom.user": string;
}

export interface operations {}

export interface external {}
